version: '3.8'

services:
  postgres:
    image: postgres:16-alpine
    container_name: booking-postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: booking
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - booking-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  backend:
    build:
      context: ./booking-backend
      dockerfile: Dockerfile
    container_name: booking-backend
    ports:
      - "3001:3001"
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/booking?schema=public
      - JWT_SECRET=${JWT_SECRET}
      - AUTH0_DOMAIN=${AUTH0_DOMAIN}
      - AUTH0_CLIENT_ID=${AUTH0_CLIENT_ID}
      - AUTH0_CLIENT_SECRET=${AUTH0_CLIENT_SECRET}
      - AUTH0_CALLBACK_URL=${AUTH0_CALLBACK_URL}
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}
      - GOOGLE_REDIRECT_URI=${GOOGLE_REDIRECT_URI}
      - CLIENT_URL=http://localhost:3000
    networks:
      - booking-network
    restart: always

  frontend:
    build:
      context: ./booking-frontend
      dockerfile: Dockerfile
    container_name: booking-frontend
    ports:
      - "3000:3000"
    depends_on:
      - backend
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=http://localhost:3001/api
    networks:
      - booking-network
    restart: always

networks:
  booking-network:
    driver: bridge

volumes:
  postgres-data: